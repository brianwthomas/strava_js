/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityZone', 'model/Comment', 'model/DetailedActivity', 'model/Fault', 'model/Lap', 'model/SummaryActivity', 'model/SummaryAthlete', 'model/UpdatableActivity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivityZone'), require('../model/Comment'), require('../model/DetailedActivity'), require('../model/Fault'), require('../model/Lap'), require('../model/SummaryActivity'), require('../model/SummaryAthlete'), require('../model/UpdatableActivity'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.ActivitiesApi = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityZone, root.StravaApiV3.Comment, root.StravaApiV3.DetailedActivity, root.StravaApiV3.Fault, root.StravaApiV3.Lap, root.StravaApiV3.SummaryActivity, root.StravaApiV3.SummaryAthlete, root.StravaApiV3.UpdatableActivity);
  }
}(this, function(ApiClient, ActivityZone, Comment, DetailedActivity, Fault, Lap, SummaryActivity, SummaryAthlete, UpdatableActivity) {
  'use strict';

  /**
   * Activities service.
   * @module api/ActivitiesApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ActivitiesApi. 
   * @alias module:api/ActivitiesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createActivity operation.
     * @callback module:api/ActivitiesApi~createActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Activity
     * Creates a manual activity for an athlete, requires activity:write scope.
     * @param {String} name The name of the activity.
     * @param {String} type Type of activity. For example - Run, Ride etc.
     * @param {Object} startDateLocal ISO 8601 formatted date time.
     * @param {Number} elapsedTime In seconds.
     * @param {Object} opts Optional parameters
     * @param {String} opts.description Description of the activity.
     * @param {Number} opts.distance In meters.
     * @param {Number} opts.trainer Set to 1 to mark as a trainer activity.
     * @param {Object} opts.photoIds List of native photo ids to attach to the activity.
     * @param {Number} opts.commute Set to 1 to mark as commute.
     * @param {module:api/ActivitiesApi~createActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedActivity}
     */
    this.createActivity = function(name, type, startDateLocal, elapsedTime, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createActivity");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createActivity");
      }

      // verify the required parameter 'startDateLocal' is set
      if (startDateLocal === undefined || startDateLocal === null) {
        throw new Error("Missing the required parameter 'startDateLocal' when calling createActivity");
      }

      // verify the required parameter 'elapsedTime' is set
      if (elapsedTime === undefined || elapsedTime === null) {
        throw new Error("Missing the required parameter 'elapsedTime' when calling createActivity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'type': type,
        'start_date_local': startDateLocal,
        'elapsed_time': elapsedTime,
        'description': opts['description'],
        'distance': opts['distance'],
        'trainer': opts['trainer'],
        'photo_ids': opts['photoIds'],
        'commute': opts['commute']
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedActivity;

      return this.apiClient.callApi(
        '/activities', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivityById operation.
     * @callback module:api/ActivitiesApi~getActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Activity
     * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param {Number} id The identifier of the activity.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAllEfforts To include all segments efforts.
     * @param {module:api/ActivitiesApi~getActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedActivity}
     */
    this.getActivityById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivityById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include_all_efforts': opts['includeAllEfforts'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedActivity;

      return this.apiClient.callApi(
        '/activities/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentsByActivityId operation.
     * @callback module:api/ActivitiesApi~getCommentsByActivityIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Activity Comments
     * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param {Number} id The identifier of the activity.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number.
     * @param {Number} opts.perPage Number of items per page. Defaults to 30. (default to 30)
     * @param {module:api/ActivitiesApi~getCommentsByActivityIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    this.getCommentsByActivityId = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCommentsByActivityId");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/activities/{id}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getKudoersByActivityId operation.
     * @callback module:api/ActivitiesApi~getKudoersByActivityIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummaryAthlete>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Activity Kudoers
     * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param {Number} id The identifier of the activity.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number.
     * @param {Number} opts.perPage Number of items per page. Defaults to 30. (default to 30)
     * @param {module:api/ActivitiesApi~getKudoersByActivityIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummaryAthlete>}
     */
    this.getKudoersByActivityId = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKudoersByActivityId");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SummaryAthlete];

      return this.apiClient.callApi(
        '/activities/{id}/kudos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLapsByActivityId operation.
     * @callback module:api/ActivitiesApi~getLapsByActivityIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lap>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Activity Laps
     * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param {Number} id The identifier of the activity.
     * @param {module:api/ActivitiesApi~getLapsByActivityIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Lap>}
     */
    this.getLapsByActivityId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLapsByActivityId");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Lap];

      return this.apiClient.callApi(
        '/activities/{id}/laps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedInAthleteActivities operation.
     * @callback module:api/ActivitiesApi~getLoggedInAthleteActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SummaryActivity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Athlete Activities
     * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.before An epoch timestamp to use for filtering activities that have taken place before a certain time.
     * @param {Number} opts.after An epoch timestamp to use for filtering activities that have taken place after a certain time.
     * @param {Number} opts.page Page number.
     * @param {Number} opts.perPage Number of items per page. Defaults to 30. (default to 30)
     * @param {module:api/ActivitiesApi~getLoggedInAthleteActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SummaryActivity>}
     */
    this.getLoggedInAthleteActivities = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'before': opts['before'],
        'after': opts['after'],
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SummaryActivity];

      return this.apiClient.callApi(
        '/athlete/activities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZonesByActivityId operation.
     * @callback module:api/ActivitiesApi~getZonesByActivityIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Activity Zones
     * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
     * @param {Number} id The identifier of the activity.
     * @param {module:api/ActivitiesApi~getZonesByActivityIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityZone>}
     */
    this.getZonesByActivityId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZonesByActivityId");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ActivityZone];

      return this.apiClient.callApi(
        '/activities/{id}/zones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActivityById operation.
     * @callback module:api/ActivitiesApi~updateActivityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Activity
     * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
     * @param {Number} id The identifier of the activity.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatableActivity} opts.body 
     * @param {module:api/ActivitiesApi~updateActivityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedActivity}
     */
    this.updateActivityById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateActivityById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedActivity;

      return this.apiClient.callApi(
        '/activities/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

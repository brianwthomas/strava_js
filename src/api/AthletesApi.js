/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityStats', 'model/DetailedAthlete', 'model/Fault', 'model/Zones'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivityStats'), require('../model/DetailedAthlete'), require('../model/Fault'), require('../model/Zones'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.AthletesApi = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityStats, root.StravaApiV3.DetailedAthlete, root.StravaApiV3.Fault, root.StravaApiV3.Zones);
  }
}(this, function(ApiClient, ActivityStats, DetailedAthlete, Fault, Zones) {
  'use strict';

  /**
   * Athletes service.
   * @module api/AthletesApi
   * @version 3.0.0
   */

  /**
   * Constructs a new AthletesApi. 
   * @alias module:api/AthletesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getLoggedInAthlete operation.
     * @callback module:api/AthletesApi~getLoggedInAthleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedAthlete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authenticated Athlete
     * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
     * @param {module:api/AthletesApi~getLoggedInAthleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedAthlete}
     */
    this.getLoggedInAthlete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedAthlete;

      return this.apiClient.callApi(
        '/athlete', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedInAthleteZones operation.
     * @callback module:api/AthletesApi~getLoggedInAthleteZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zones} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Zones
     * Returns the the authenticated athlete&#39;s heart rate and power zones. Requires profile:read_all.
     * @param {module:api/AthletesApi~getLoggedInAthleteZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zones}
     */
    this.getLoggedInAthleteZones = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Zones;

      return this.apiClient.callApi(
        '/athlete/zones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStats operation.
     * @callback module:api/AthletesApi~getStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Athlete Stats
     * Returns the activity stats of an athlete.
     * @param {Number} id The identifier of the athlete. Must match the authenticated athlete.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number.
     * @param {Number} opts.perPage Number of items per page. Defaults to 30. (default to 30)
     * @param {module:api/AthletesApi~getStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityStats}
     */
    this.getStats = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStats");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ActivityStats;

      return this.apiClient.callApi(
        '/athletes/{id}/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoggedInAthlete operation.
     * @callback module:api/AthletesApi~updateLoggedInAthleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetailedAthlete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Athlete
     * Update the currently authenticated athlete. Requires profile:write scope.
     * @param {Number} weight The weight of the athlete in kilograms.
     * @param {module:api/AthletesApi~updateLoggedInAthleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetailedAthlete}
     */
    this.updateLoggedInAthlete = function(weight, callback) {
      var postBody = null;

      // verify the required parameter 'weight' is set
      if (weight === undefined || weight === null) {
        throw new Error("Missing the required parameter 'weight' when calling updateLoggedInAthlete");
      }


      var pathParams = {
        'weight': weight
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['strava_oauth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DetailedAthlete;

      return this.apiClient.callApi(
        '/athlete', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityTotal'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ActivityTotal'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.ActivityStats = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityTotal);
  }
}(this, function(ApiClient, ActivityTotal) {
  'use strict';




  /**
   * The ActivityStats model module.
   * @module model/ActivityStats
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>ActivityStats</code>.
   * A set of rolled-up statistics and totals for an athlete
   * @alias module:model/ActivityStats
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>ActivityStats</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ActivityStats} obj Optional instance to populate.
   * @return {module:model/ActivityStats} The populated <code>ActivityStats</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('biggest_ride_distance')) {
        obj['biggest_ride_distance'] = ApiClient.convertToType(data['biggest_ride_distance'], 'Number');
      }
      if (data.hasOwnProperty('biggest_climb_elevation_gain')) {
        obj['biggest_climb_elevation_gain'] = ApiClient.convertToType(data['biggest_climb_elevation_gain'], 'Number');
      }
      if (data.hasOwnProperty('recent_ride_totals')) {
        obj['recent_ride_totals'] = ActivityTotal.constructFromObject(data['recent_ride_totals']);
      }
      if (data.hasOwnProperty('recent_run_totals')) {
        obj['recent_run_totals'] = ActivityTotal.constructFromObject(data['recent_run_totals']);
      }
      if (data.hasOwnProperty('recent_swim_totals')) {
        obj['recent_swim_totals'] = ActivityTotal.constructFromObject(data['recent_swim_totals']);
      }
      if (data.hasOwnProperty('ytd_ride_totals')) {
        obj['ytd_ride_totals'] = ActivityTotal.constructFromObject(data['ytd_ride_totals']);
      }
      if (data.hasOwnProperty('ytd_run_totals')) {
        obj['ytd_run_totals'] = ActivityTotal.constructFromObject(data['ytd_run_totals']);
      }
      if (data.hasOwnProperty('ytd_swim_totals')) {
        obj['ytd_swim_totals'] = ActivityTotal.constructFromObject(data['ytd_swim_totals']);
      }
      if (data.hasOwnProperty('all_ride_totals')) {
        obj['all_ride_totals'] = ActivityTotal.constructFromObject(data['all_ride_totals']);
      }
      if (data.hasOwnProperty('all_run_totals')) {
        obj['all_run_totals'] = ActivityTotal.constructFromObject(data['all_run_totals']);
      }
      if (data.hasOwnProperty('all_swim_totals')) {
        obj['all_swim_totals'] = ActivityTotal.constructFromObject(data['all_swim_totals']);
      }
    }
    return obj;
  }

  /**
   * The longest distance ridden by the athlete.
   * @member {Number} biggest_ride_distance
   */
  exports.prototype['biggest_ride_distance'] = undefined;
  /**
   * The highest climb ridden by the athlete.
   * @member {Number} biggest_climb_elevation_gain
   */
  exports.prototype['biggest_climb_elevation_gain'] = undefined;
  /**
   * The recent (last 4 weeks) ride stats for the athlete.
   * @member {module:model/ActivityTotal} recent_ride_totals
   */
  exports.prototype['recent_ride_totals'] = undefined;
  /**
   * The recent (last 4 weeks) run stats for the athlete.
   * @member {module:model/ActivityTotal} recent_run_totals
   */
  exports.prototype['recent_run_totals'] = undefined;
  /**
   * The recent (last 4 weeks) swim stats for the athlete.
   * @member {module:model/ActivityTotal} recent_swim_totals
   */
  exports.prototype['recent_swim_totals'] = undefined;
  /**
   * The year to date ride stats for the athlete.
   * @member {module:model/ActivityTotal} ytd_ride_totals
   */
  exports.prototype['ytd_ride_totals'] = undefined;
  /**
   * The year to date run stats for the athlete.
   * @member {module:model/ActivityTotal} ytd_run_totals
   */
  exports.prototype['ytd_run_totals'] = undefined;
  /**
   * The year to date swim stats for the athlete.
   * @member {module:model/ActivityTotal} ytd_swim_totals
   */
  exports.prototype['ytd_swim_totals'] = undefined;
  /**
   * The all time ride stats for the athlete.
   * @member {module:model/ActivityTotal} all_ride_totals
   */
  exports.prototype['all_ride_totals'] = undefined;
  /**
   * The all time run stats for the athlete.
   * @member {module:model/ActivityTotal} all_run_totals
   */
  exports.prototype['all_run_totals'] = undefined;
  /**
   * The all time swim stats for the athlete.
   * @member {module:model/ActivityTotal} all_swim_totals
   */
  exports.prototype['all_swim_totals'] = undefined;



  return exports;
}));



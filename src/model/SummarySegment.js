/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LatLng', 'model/SummarySegmentEffort'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LatLng'), require('./SummarySegmentEffort'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.SummarySegment = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.LatLng, root.StravaApiV3.SummarySegmentEffort);
  }
}(this, function(ApiClient, LatLng, SummarySegmentEffort) {
  'use strict';




  /**
   * The SummarySegment model module.
   * @module model/SummarySegment
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>SummarySegment</code>.
   * @alias module:model/SummarySegment
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>SummarySegment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SummarySegment} obj Optional instance to populate.
   * @return {module:model/SummarySegment} The populated <code>SummarySegment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('activity_type')) {
        obj['activity_type'] = ApiClient.convertToType(data['activity_type'], 'String');
      }
      if (data.hasOwnProperty('distance')) {
        obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
      }
      if (data.hasOwnProperty('average_grade')) {
        obj['average_grade'] = ApiClient.convertToType(data['average_grade'], 'Number');
      }
      if (data.hasOwnProperty('maximum_grade')) {
        obj['maximum_grade'] = ApiClient.convertToType(data['maximum_grade'], 'Number');
      }
      if (data.hasOwnProperty('elevation_high')) {
        obj['elevation_high'] = ApiClient.convertToType(data['elevation_high'], 'Number');
      }
      if (data.hasOwnProperty('elevation_low')) {
        obj['elevation_low'] = ApiClient.convertToType(data['elevation_low'], 'Number');
      }
      if (data.hasOwnProperty('start_latlng')) {
        obj['start_latlng'] = LatLng.constructFromObject(data['start_latlng']);
      }
      if (data.hasOwnProperty('end_latlng')) {
        obj['end_latlng'] = LatLng.constructFromObject(data['end_latlng']);
      }
      if (data.hasOwnProperty('climb_category')) {
        obj['climb_category'] = ApiClient.convertToType(data['climb_category'], 'Number');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('private')) {
        obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
      }
      if (data.hasOwnProperty('athlete_pr_effort')) {
        obj['athlete_pr_effort'] = SummarySegmentEffort.constructFromObject(data['athlete_pr_effort']);
      }
    }
    return obj;
  }

  /**
   * The unique identifier of this segment
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The name of this segment
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/SummarySegment.ActivityTypeEnum} activity_type
   */
  exports.prototype['activity_type'] = undefined;
  /**
   * The segment's distance, in meters
   * @member {Number} distance
   */
  exports.prototype['distance'] = undefined;
  /**
   * The segment's average grade, in percents
   * @member {Number} average_grade
   */
  exports.prototype['average_grade'] = undefined;
  /**
   * The segments's maximum grade, in percents
   * @member {Number} maximum_grade
   */
  exports.prototype['maximum_grade'] = undefined;
  /**
   * The segments's highest elevation, in meters
   * @member {Number} elevation_high
   */
  exports.prototype['elevation_high'] = undefined;
  /**
   * The segments's lowest elevation, in meters
   * @member {Number} elevation_low
   */
  exports.prototype['elevation_low'] = undefined;
  /**
   * @member {module:model/LatLng} start_latlng
   */
  exports.prototype['start_latlng'] = undefined;
  /**
   * @member {module:model/LatLng} end_latlng
   */
  exports.prototype['end_latlng'] = undefined;
  /**
   * The category of the climb
   * @member {Number} climb_category
   */
  exports.prototype['climb_category'] = undefined;
  /**
   * The segments's city.
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * The segments's state or geographical region.
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * The segment's country.
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Whether this segment is private.
   * @member {Boolean} private
   */
  exports.prototype['private'] = undefined;
  /**
   * @member {module:model/SummarySegmentEffort} athlete_pr_effort
   */
  exports.prototype['athlete_pr_effort'] = undefined;


  /**
   * Allowed values for the <code>activity_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ActivityTypeEnum = {
    /**
     * value: "Ride"
     * @const
     */
    "Ride": "Ride",
    /**
     * value: "Run"
     * @const
     */
    "Run": "Run"  };


  return exports;
}));



/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityType', 'model/LatLng', 'model/MetaActivity', 'model/MetaAthlete', 'model/PolylineMap'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ActivityType'), require('./LatLng'), require('./MetaActivity'), require('./MetaAthlete'), require('./PolylineMap'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.SummaryActivity = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityType, root.StravaApiV3.LatLng, root.StravaApiV3.MetaActivity, root.StravaApiV3.MetaAthlete, root.StravaApiV3.PolylineMap);
  }
}(this, function(ApiClient, ActivityType, LatLng, MetaActivity, MetaAthlete, PolylineMap) {
  'use strict';




  /**
   * The SummaryActivity model module.
   * @module model/SummaryActivity
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>SummaryActivity</code>.
   * @alias module:model/SummaryActivity
   * @class
   * @implements module:model/MetaActivity
   */
  var exports = function() {
    var _this = this;

    MetaActivity.call(_this);






































  };

  /**
   * Constructs a <code>SummaryActivity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SummaryActivity} obj Optional instance to populate.
   * @return {module:model/SummaryActivity} The populated <code>SummaryActivity</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      MetaActivity.constructFromObject(data, obj);
      if (data.hasOwnProperty('external_id')) {
        obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
      }
      if (data.hasOwnProperty('upload_id')) {
        obj['upload_id'] = ApiClient.convertToType(data['upload_id'], 'Number');
      }
      if (data.hasOwnProperty('athlete')) {
        obj['athlete'] = MetaAthlete.constructFromObject(data['athlete']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('distance')) {
        obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
      }
      if (data.hasOwnProperty('moving_time')) {
        obj['moving_time'] = ApiClient.convertToType(data['moving_time'], 'Number');
      }
      if (data.hasOwnProperty('elapsed_time')) {
        obj['elapsed_time'] = ApiClient.convertToType(data['elapsed_time'], 'Number');
      }
      if (data.hasOwnProperty('total_elevation_gain')) {
        obj['total_elevation_gain'] = ApiClient.convertToType(data['total_elevation_gain'], 'Number');
      }
      if (data.hasOwnProperty('elev_high')) {
        obj['elev_high'] = ApiClient.convertToType(data['elev_high'], 'Number');
      }
      if (data.hasOwnProperty('elev_low')) {
        obj['elev_low'] = ApiClient.convertToType(data['elev_low'], 'Number');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ActivityType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('start_date_local')) {
        obj['start_date_local'] = ApiClient.convertToType(data['start_date_local'], 'Date');
      }
      if (data.hasOwnProperty('timezone')) {
        obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
      }
      if (data.hasOwnProperty('start_latlng')) {
        obj['start_latlng'] = LatLng.constructFromObject(data['start_latlng']);
      }
      if (data.hasOwnProperty('end_latlng')) {
        obj['end_latlng'] = LatLng.constructFromObject(data['end_latlng']);
      }
      if (data.hasOwnProperty('achievement_count')) {
        obj['achievement_count'] = ApiClient.convertToType(data['achievement_count'], 'Number');
      }
      if (data.hasOwnProperty('kudos_count')) {
        obj['kudos_count'] = ApiClient.convertToType(data['kudos_count'], 'Number');
      }
      if (data.hasOwnProperty('comment_count')) {
        obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
      }
      if (data.hasOwnProperty('athlete_count')) {
        obj['athlete_count'] = ApiClient.convertToType(data['athlete_count'], 'Number');
      }
      if (data.hasOwnProperty('photo_count')) {
        obj['photo_count'] = ApiClient.convertToType(data['photo_count'], 'Number');
      }
      if (data.hasOwnProperty('total_photo_count')) {
        obj['total_photo_count'] = ApiClient.convertToType(data['total_photo_count'], 'Number');
      }
      if (data.hasOwnProperty('map')) {
        obj['map'] = PolylineMap.constructFromObject(data['map']);
      }
      if (data.hasOwnProperty('trainer')) {
        obj['trainer'] = ApiClient.convertToType(data['trainer'], 'Boolean');
      }
      if (data.hasOwnProperty('commute')) {
        obj['commute'] = ApiClient.convertToType(data['commute'], 'Boolean');
      }
      if (data.hasOwnProperty('manual')) {
        obj['manual'] = ApiClient.convertToType(data['manual'], 'Boolean');
      }
      if (data.hasOwnProperty('private')) {
        obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
      }
      if (data.hasOwnProperty('flagged')) {
        obj['flagged'] = ApiClient.convertToType(data['flagged'], 'Boolean');
      }
      if (data.hasOwnProperty('workout_type')) {
        obj['workout_type'] = ApiClient.convertToType(data['workout_type'], 'Number');
      }
      if (data.hasOwnProperty('average_speed')) {
        obj['average_speed'] = ApiClient.convertToType(data['average_speed'], 'Number');
      }
      if (data.hasOwnProperty('max_speed')) {
        obj['max_speed'] = ApiClient.convertToType(data['max_speed'], 'Number');
      }
      if (data.hasOwnProperty('has_kudoed')) {
        obj['has_kudoed'] = ApiClient.convertToType(data['has_kudoed'], 'Boolean');
      }
      if (data.hasOwnProperty('gear_id')) {
        obj['gear_id'] = ApiClient.convertToType(data['gear_id'], 'String');
      }
      if (data.hasOwnProperty('kilojoules')) {
        obj['kilojoules'] = ApiClient.convertToType(data['kilojoules'], 'Number');
      }
      if (data.hasOwnProperty('average_watts')) {
        obj['average_watts'] = ApiClient.convertToType(data['average_watts'], 'Number');
      }
      if (data.hasOwnProperty('device_watts')) {
        obj['device_watts'] = ApiClient.convertToType(data['device_watts'], 'Boolean');
      }
      if (data.hasOwnProperty('max_watts')) {
        obj['max_watts'] = ApiClient.convertToType(data['max_watts'], 'Number');
      }
      if (data.hasOwnProperty('weighted_average_watts')) {
        obj['weighted_average_watts'] = ApiClient.convertToType(data['weighted_average_watts'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The identifier provided at upload time
   * @member {String} external_id
   */
  exports.prototype['external_id'] = undefined;
  /**
   * The identifier of the upload that resulted in this activity
   * @member {Number} upload_id
   */
  exports.prototype['upload_id'] = undefined;
  /**
   * @member {module:model/MetaAthlete} athlete
   */
  exports.prototype['athlete'] = undefined;
  /**
   * The name of the activity
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The activity's distance, in meters
   * @member {Number} distance
   */
  exports.prototype['distance'] = undefined;
  /**
   * The activity's moving time, in seconds
   * @member {Number} moving_time
   */
  exports.prototype['moving_time'] = undefined;
  /**
   * The activity's elapsed time, in seconds
   * @member {Number} elapsed_time
   */
  exports.prototype['elapsed_time'] = undefined;
  /**
   * The activity's total elevation gain.
   * @member {Number} total_elevation_gain
   */
  exports.prototype['total_elevation_gain'] = undefined;
  /**
   * The activity's highest elevation, in meters
   * @member {Number} elev_high
   */
  exports.prototype['elev_high'] = undefined;
  /**
   * The activity's lowest elevation, in meters
   * @member {Number} elev_low
   */
  exports.prototype['elev_low'] = undefined;
  /**
   * @member {module:model/ActivityType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The time at which the activity was started.
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * The time at which the activity was started in the local timezone.
   * @member {Date} start_date_local
   */
  exports.prototype['start_date_local'] = undefined;
  /**
   * The timezone of the activity
   * @member {String} timezone
   */
  exports.prototype['timezone'] = undefined;
  /**
   * @member {module:model/LatLng} start_latlng
   */
  exports.prototype['start_latlng'] = undefined;
  /**
   * @member {module:model/LatLng} end_latlng
   */
  exports.prototype['end_latlng'] = undefined;
  /**
   * The number of achievements gained during this activity
   * @member {Number} achievement_count
   */
  exports.prototype['achievement_count'] = undefined;
  /**
   * The number of kudos given for this activity
   * @member {Number} kudos_count
   */
  exports.prototype['kudos_count'] = undefined;
  /**
   * The number of comments for this activity
   * @member {Number} comment_count
   */
  exports.prototype['comment_count'] = undefined;
  /**
   * The number of athletes for taking part in a group activity
   * @member {Number} athlete_count
   */
  exports.prototype['athlete_count'] = undefined;
  /**
   * The number of Instagram photos for this activity
   * @member {Number} photo_count
   */
  exports.prototype['photo_count'] = undefined;
  /**
   * The number of Instagram and Strava photos for this activity
   * @member {Number} total_photo_count
   */
  exports.prototype['total_photo_count'] = undefined;
  /**
   * @member {module:model/PolylineMap} map
   */
  exports.prototype['map'] = undefined;
  /**
   * Whether this activity was recorded on a training machine
   * @member {Boolean} trainer
   */
  exports.prototype['trainer'] = undefined;
  /**
   * Whether this activity is a commute
   * @member {Boolean} commute
   */
  exports.prototype['commute'] = undefined;
  /**
   * Whether this activity was created manually
   * @member {Boolean} manual
   */
  exports.prototype['manual'] = undefined;
  /**
   * Whether this activity is private
   * @member {Boolean} private
   */
  exports.prototype['private'] = undefined;
  /**
   * Whether this activity is flagged
   * @member {Boolean} flagged
   */
  exports.prototype['flagged'] = undefined;
  /**
   * The activity's workout type
   * @member {Number} workout_type
   */
  exports.prototype['workout_type'] = undefined;
  /**
   * The activity's average speed, in meters per second
   * @member {Number} average_speed
   */
  exports.prototype['average_speed'] = undefined;
  /**
   * The activity's max speed, in meters per second
   * @member {Number} max_speed
   */
  exports.prototype['max_speed'] = undefined;
  /**
   * Whether the logged-in athlete has kudoed this activity
   * @member {Boolean} has_kudoed
   */
  exports.prototype['has_kudoed'] = undefined;
  /**
   * The id of the gear for the activity
   * @member {String} gear_id
   */
  exports.prototype['gear_id'] = undefined;
  /**
   * The total work done in kilojoules during this activity. Rides only
   * @member {Number} kilojoules
   */
  exports.prototype['kilojoules'] = undefined;
  /**
   * Average power output in watts during this activity. Rides only
   * @member {Number} average_watts
   */
  exports.prototype['average_watts'] = undefined;
  /**
   * Whether the watts are from a power meter, false if estimated
   * @member {Boolean} device_watts
   */
  exports.prototype['device_watts'] = undefined;
  /**
   * Rides with power meter data only
   * @member {Number} max_watts
   */
  exports.prototype['max_watts'] = undefined;
  /**
   * Similar to Normalized Power. Rides with power meter data only
   * @member {Number} weighted_average_watts
   */
  exports.prototype['weighted_average_watts'] = undefined;

  // Implement MetaActivity interface:
  /**
   * The unique identifier of the activity
   * @member {Number} id
   */
exports.prototype['id'] = undefined;



  return exports;
}));



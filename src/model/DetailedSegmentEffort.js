/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MetaActivity', 'model/MetaAthlete', 'model/SummarySegment', 'model/SummarySegmentEffort'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MetaActivity'), require('./MetaAthlete'), require('./SummarySegment'), require('./SummarySegmentEffort'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.DetailedSegmentEffort = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.MetaActivity, root.StravaApiV3.MetaAthlete, root.StravaApiV3.SummarySegment, root.StravaApiV3.SummarySegmentEffort);
  }
}(this, function(ApiClient, MetaActivity, MetaAthlete, SummarySegment, SummarySegmentEffort) {
  'use strict';




  /**
   * The DetailedSegmentEffort model module.
   * @module model/DetailedSegmentEffort
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>DetailedSegmentEffort</code>.
   * @alias module:model/DetailedSegmentEffort
   * @class
   * @implements module:model/SummarySegmentEffort
   */
  var exports = function() {
    var _this = this;

    SummarySegmentEffort.call(_this);















  };

  /**
   * Constructs a <code>DetailedSegmentEffort</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DetailedSegmentEffort} obj Optional instance to populate.
   * @return {module:model/DetailedSegmentEffort} The populated <code>DetailedSegmentEffort</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      SummarySegmentEffort.constructFromObject(data, obj);
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('activity')) {
        obj['activity'] = MetaActivity.constructFromObject(data['activity']);
      }
      if (data.hasOwnProperty('athlete')) {
        obj['athlete'] = MetaAthlete.constructFromObject(data['athlete']);
      }
      if (data.hasOwnProperty('moving_time')) {
        obj['moving_time'] = ApiClient.convertToType(data['moving_time'], 'Number');
      }
      if (data.hasOwnProperty('start_index')) {
        obj['start_index'] = ApiClient.convertToType(data['start_index'], 'Number');
      }
      if (data.hasOwnProperty('end_index')) {
        obj['end_index'] = ApiClient.convertToType(data['end_index'], 'Number');
      }
      if (data.hasOwnProperty('average_cadence')) {
        obj['average_cadence'] = ApiClient.convertToType(data['average_cadence'], 'Number');
      }
      if (data.hasOwnProperty('average_watts')) {
        obj['average_watts'] = ApiClient.convertToType(data['average_watts'], 'Number');
      }
      if (data.hasOwnProperty('device_watts')) {
        obj['device_watts'] = ApiClient.convertToType(data['device_watts'], 'Boolean');
      }
      if (data.hasOwnProperty('average_heartrate')) {
        obj['average_heartrate'] = ApiClient.convertToType(data['average_heartrate'], 'Number');
      }
      if (data.hasOwnProperty('max_heartrate')) {
        obj['max_heartrate'] = ApiClient.convertToType(data['max_heartrate'], 'Number');
      }
      if (data.hasOwnProperty('segment')) {
        obj['segment'] = SummarySegment.constructFromObject(data['segment']);
      }
      if (data.hasOwnProperty('kom_rank')) {
        obj['kom_rank'] = ApiClient.convertToType(data['kom_rank'], 'Number');
      }
      if (data.hasOwnProperty('pr_rank')) {
        obj['pr_rank'] = ApiClient.convertToType(data['pr_rank'], 'Number');
      }
      if (data.hasOwnProperty('hidden')) {
        obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The name of the segment on which this effort was performed
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/MetaActivity} activity
   */
  exports.prototype['activity'] = undefined;
  /**
   * @member {module:model/MetaAthlete} athlete
   */
  exports.prototype['athlete'] = undefined;
  /**
   * The effort's moving time
   * @member {Number} moving_time
   */
  exports.prototype['moving_time'] = undefined;
  /**
   * The start index of this effort in its activity's stream
   * @member {Number} start_index
   */
  exports.prototype['start_index'] = undefined;
  /**
   * The end index of this effort in its activity's stream
   * @member {Number} end_index
   */
  exports.prototype['end_index'] = undefined;
  /**
   * The effort's average cadence
   * @member {Number} average_cadence
   */
  exports.prototype['average_cadence'] = undefined;
  /**
   * The average wattage of this effort
   * @member {Number} average_watts
   */
  exports.prototype['average_watts'] = undefined;
  /**
   * For riding efforts, whether the wattage was reported by a dedicated recording device
   * @member {Boolean} device_watts
   */
  exports.prototype['device_watts'] = undefined;
  /**
   * The heart heart rate of the athlete during this effort
   * @member {Number} average_heartrate
   */
  exports.prototype['average_heartrate'] = undefined;
  /**
   * The maximum heart rate of the athlete during this effort
   * @member {Number} max_heartrate
   */
  exports.prototype['max_heartrate'] = undefined;
  /**
   * @member {module:model/SummarySegment} segment
   */
  exports.prototype['segment'] = undefined;
  /**
   * The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
   * @member {Number} kom_rank
   */
  exports.prototype['kom_rank'] = undefined;
  /**
   * The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
   * @member {Number} pr_rank
   */
  exports.prototype['pr_rank'] = undefined;
  /**
   * Whether this effort should be hidden when viewed within an activity
   * @member {Boolean} hidden
   */
  exports.prototype['hidden'] = undefined;

  // Implement SummarySegmentEffort interface:
  /**
   * The unique identifier of this effort
   * @member {Number} id
   */
exports.prototype['id'] = undefined;

  /**
   * The effort's elapsed time
   * @member {Number} elapsed_time
   */
exports.prototype['elapsed_time'] = undefined;

  /**
   * The time at which the effort was started.
   * @member {Date} start_date
   */
exports.prototype['start_date'] = undefined;

  /**
   * The time at which the effort was started in the local timezone.
   * @member {Date} start_date_local
   */
exports.prototype['start_date_local'] = undefined;

  /**
   * The effort's distance in meters
   * @member {Number} distance
   */
exports.prototype['distance'] = undefined;

  /**
   * Whether this effort is the current best on the leaderboard
   * @member {Boolean} is_kom
   */
exports.prototype['is_kom'] = undefined;



  return exports;
}));



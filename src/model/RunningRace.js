/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.RunningRace = factory(root.StravaApiV3.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The RunningRace model module.
   * @module model/RunningRace
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>RunningRace</code>.
   * @alias module:model/RunningRace
   * @class
   */
  var exports = function() {
    var _this = this;













  };

  /**
   * Constructs a <code>RunningRace</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RunningRace} obj Optional instance to populate.
   * @return {module:model/RunningRace} The populated <code>RunningRace</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('running_race_type')) {
        obj['running_race_type'] = ApiClient.convertToType(data['running_race_type'], 'Number');
      }
      if (data.hasOwnProperty('distance')) {
        obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
      }
      if (data.hasOwnProperty('start_date_local')) {
        obj['start_date_local'] = ApiClient.convertToType(data['start_date_local'], 'Date');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('route_ids')) {
        obj['route_ids'] = ApiClient.convertToType(data['route_ids'], ['Number']);
      }
      if (data.hasOwnProperty('measurement_preference')) {
        obj['measurement_preference'] = ApiClient.convertToType(data['measurement_preference'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('website_url')) {
        obj['website_url'] = ApiClient.convertToType(data['website_url'], 'String');
      }
    }
    return obj;
  }

  /**
   * The unique identifier of this race.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The name of this race.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The type of this race.
   * @member {Number} running_race_type
   */
  exports.prototype['running_race_type'] = undefined;
  /**
   * The race's distance, in meters.
   * @member {Number} distance
   */
  exports.prototype['distance'] = undefined;
  /**
   * The time at which the race begins started in the local timezone.
   * @member {Date} start_date_local
   */
  exports.prototype['start_date_local'] = undefined;
  /**
   * The name of the city in which the race is taking place.
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * The name of the state or geographical region in which the race is taking place.
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * The name of the country in which the race is taking place.
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * The set of routes that cover this race's course.
   * @member {Array.<Number>} route_ids
   */
  exports.prototype['route_ids'] = undefined;
  /**
   * The unit system in which the race should be displayed.
   * @member {module:model/RunningRace.MeasurementPreferenceEnum} measurement_preference
   */
  exports.prototype['measurement_preference'] = undefined;
  /**
   * The vanity URL of this race on Strava.
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * The URL of this race's website.
   * @member {String} website_url
   */
  exports.prototype['website_url'] = undefined;


  /**
   * Allowed values for the <code>measurement_preference</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MeasurementPreferenceEnum = {
    /**
     * value: "feet"
     * @const
     */
    "feet": "feet",
    /**
     * value: "meters"
     * @const
     */
    "meters": "meters"  };


  return exports;
}));



/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MetaActivity', 'model/MetaAthlete'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MetaActivity'), require('./MetaAthlete'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.Lap = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.MetaActivity, root.StravaApiV3.MetaAthlete);
  }
}(this, function(ApiClient, MetaActivity, MetaAthlete) {
  'use strict';




  /**
   * The Lap model module.
   * @module model/Lap
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Lap</code>.
   * @alias module:model/Lap
   * @class
   */
  var exports = function() {
    var _this = this;



















  };

  /**
   * Constructs a <code>Lap</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Lap} obj Optional instance to populate.
   * @return {module:model/Lap} The populated <code>Lap</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('activity')) {
        obj['activity'] = MetaActivity.constructFromObject(data['activity']);
      }
      if (data.hasOwnProperty('athlete')) {
        obj['athlete'] = MetaAthlete.constructFromObject(data['athlete']);
      }
      if (data.hasOwnProperty('average_cadence')) {
        obj['average_cadence'] = ApiClient.convertToType(data['average_cadence'], 'Number');
      }
      if (data.hasOwnProperty('average_speed')) {
        obj['average_speed'] = ApiClient.convertToType(data['average_speed'], 'Number');
      }
      if (data.hasOwnProperty('distance')) {
        obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
      }
      if (data.hasOwnProperty('elapsed_time')) {
        obj['elapsed_time'] = ApiClient.convertToType(data['elapsed_time'], 'Number');
      }
      if (data.hasOwnProperty('start_index')) {
        obj['start_index'] = ApiClient.convertToType(data['start_index'], 'Number');
      }
      if (data.hasOwnProperty('end_index')) {
        obj['end_index'] = ApiClient.convertToType(data['end_index'], 'Number');
      }
      if (data.hasOwnProperty('lap_index')) {
        obj['lap_index'] = ApiClient.convertToType(data['lap_index'], 'Number');
      }
      if (data.hasOwnProperty('max_speed')) {
        obj['max_speed'] = ApiClient.convertToType(data['max_speed'], 'Number');
      }
      if (data.hasOwnProperty('moving_time')) {
        obj['moving_time'] = ApiClient.convertToType(data['moving_time'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('pace_zone')) {
        obj['pace_zone'] = ApiClient.convertToType(data['pace_zone'], 'Number');
      }
      if (data.hasOwnProperty('split')) {
        obj['split'] = ApiClient.convertToType(data['split'], 'Number');
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('start_date_local')) {
        obj['start_date_local'] = ApiClient.convertToType(data['start_date_local'], 'Date');
      }
      if (data.hasOwnProperty('total_elevation_gain')) {
        obj['total_elevation_gain'] = ApiClient.convertToType(data['total_elevation_gain'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The unique identifier of this lap
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {module:model/MetaActivity} activity
   */
  exports.prototype['activity'] = undefined;
  /**
   * @member {module:model/MetaAthlete} athlete
   */
  exports.prototype['athlete'] = undefined;
  /**
   * The lap's average cadence
   * @member {Number} average_cadence
   */
  exports.prototype['average_cadence'] = undefined;
  /**
   * The lap's average speed
   * @member {Number} average_speed
   */
  exports.prototype['average_speed'] = undefined;
  /**
   * The lap's distance, in meters
   * @member {Number} distance
   */
  exports.prototype['distance'] = undefined;
  /**
   * The lap's elapsed time, in seconds
   * @member {Number} elapsed_time
   */
  exports.prototype['elapsed_time'] = undefined;
  /**
   * The start index of this effort in its activity's stream
   * @member {Number} start_index
   */
  exports.prototype['start_index'] = undefined;
  /**
   * The end index of this effort in its activity's stream
   * @member {Number} end_index
   */
  exports.prototype['end_index'] = undefined;
  /**
   * The index of this lap in the activity it belongs to
   * @member {Number} lap_index
   */
  exports.prototype['lap_index'] = undefined;
  /**
   * The maximum speed of this lat, in meters per second
   * @member {Number} max_speed
   */
  exports.prototype['max_speed'] = undefined;
  /**
   * The lap's moving time, in seconds
   * @member {Number} moving_time
   */
  exports.prototype['moving_time'] = undefined;
  /**
   * The name of the lap
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The athlete's pace zone during this lap
   * @member {Number} pace_zone
   */
  exports.prototype['pace_zone'] = undefined;
  /**
   * @member {Number} split
   */
  exports.prototype['split'] = undefined;
  /**
   * The time at which the lap was started.
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * The time at which the lap was started in the local timezone.
   * @member {Date} start_date_local
   */
  exports.prototype['start_date_local'] = undefined;
  /**
   * The elevation gain of this lap, in meters
   * @member {Number} total_elevation_gain
   */
  exports.prototype['total_elevation_gain'] = undefined;



  return exports;
}));



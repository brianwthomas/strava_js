/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityType', 'model/DetailedSegmentEffort', 'model/Lap', 'model/LatLng', 'model/MetaAthlete', 'model/PhotosSummary', 'model/PolylineMap', 'model/Split', 'model/SummaryActivity', 'model/SummaryGear'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ActivityType'), require('./DetailedSegmentEffort'), require('./Lap'), require('./LatLng'), require('./MetaAthlete'), require('./PhotosSummary'), require('./PolylineMap'), require('./Split'), require('./SummaryActivity'), require('./SummaryGear'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.DetailedActivity = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.ActivityType, root.StravaApiV3.DetailedSegmentEffort, root.StravaApiV3.Lap, root.StravaApiV3.LatLng, root.StravaApiV3.MetaAthlete, root.StravaApiV3.PhotosSummary, root.StravaApiV3.PolylineMap, root.StravaApiV3.Split, root.StravaApiV3.SummaryActivity, root.StravaApiV3.SummaryGear);
  }
}(this, function(ApiClient, ActivityType, DetailedSegmentEffort, Lap, LatLng, MetaAthlete, PhotosSummary, PolylineMap, Split, SummaryActivity, SummaryGear) {
  'use strict';




  /**
   * The DetailedActivity model module.
   * @module model/DetailedActivity
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>DetailedActivity</code>.
   * @alias module:model/DetailedActivity
   * @class
   * @implements module:model/SummaryActivity
   */
  var exports = function() {
    var _this = this;

    SummaryActivity.call(_this);











  };

  /**
   * Constructs a <code>DetailedActivity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DetailedActivity} obj Optional instance to populate.
   * @return {module:model/DetailedActivity} The populated <code>DetailedActivity</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      SummaryActivity.constructFromObject(data, obj);
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('photos')) {
        obj['photos'] = PhotosSummary.constructFromObject(data['photos']);
      }
      if (data.hasOwnProperty('gear')) {
        obj['gear'] = SummaryGear.constructFromObject(data['gear']);
      }
      if (data.hasOwnProperty('calories')) {
        obj['calories'] = ApiClient.convertToType(data['calories'], 'Number');
      }
      if (data.hasOwnProperty('segment_efforts')) {
        obj['segment_efforts'] = ApiClient.convertToType(data['segment_efforts'], [DetailedSegmentEffort]);
      }
      if (data.hasOwnProperty('device_name')) {
        obj['device_name'] = ApiClient.convertToType(data['device_name'], 'String');
      }
      if (data.hasOwnProperty('embed_token')) {
        obj['embed_token'] = ApiClient.convertToType(data['embed_token'], 'String');
      }
      if (data.hasOwnProperty('splits_metric')) {
        obj['splits_metric'] = ApiClient.convertToType(data['splits_metric'], [Split]);
      }
      if (data.hasOwnProperty('splits_standard')) {
        obj['splits_standard'] = ApiClient.convertToType(data['splits_standard'], [Split]);
      }
      if (data.hasOwnProperty('laps')) {
        obj['laps'] = ApiClient.convertToType(data['laps'], [Lap]);
      }
      if (data.hasOwnProperty('best_efforts')) {
        obj['best_efforts'] = ApiClient.convertToType(data['best_efforts'], [DetailedSegmentEffort]);
      }
    }
    return obj;
  }

  /**
   * The description of the activity
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {module:model/PhotosSummary} photos
   */
  exports.prototype['photos'] = undefined;
  /**
   * @member {module:model/SummaryGear} gear
   */
  exports.prototype['gear'] = undefined;
  /**
   * The number of kilocalories consumed during this activity
   * @member {Number} calories
   */
  exports.prototype['calories'] = undefined;
  /**
   * @member {Array.<module:model/DetailedSegmentEffort>} segment_efforts
   */
  exports.prototype['segment_efforts'] = undefined;
  /**
   * The name of the device used to record the activity
   * @member {String} device_name
   */
  exports.prototype['device_name'] = undefined;
  /**
   * The token used to embed a Strava activity
   * @member {String} embed_token
   */
  exports.prototype['embed_token'] = undefined;
  /**
   * The splits of this activity in metric units (for runs)
   * @member {Array.<module:model/Split>} splits_metric
   */
  exports.prototype['splits_metric'] = undefined;
  /**
   * The splits of this activity in imperial units (for runs)
   * @member {Array.<module:model/Split>} splits_standard
   */
  exports.prototype['splits_standard'] = undefined;
  /**
   * @member {Array.<module:model/Lap>} laps
   */
  exports.prototype['laps'] = undefined;
  /**
   * @member {Array.<module:model/DetailedSegmentEffort>} best_efforts
   */
  exports.prototype['best_efforts'] = undefined;

  // Implement SummaryActivity interface:
  /**
   * The unique identifier of the activity
   * @member {Number} id
   */
exports.prototype['id'] = undefined;

  /**
   * The identifier provided at upload time
   * @member {String} external_id
   */
exports.prototype['external_id'] = undefined;

  /**
   * The identifier of the upload that resulted in this activity
   * @member {Number} upload_id
   */
exports.prototype['upload_id'] = undefined;

  /**
   * @member {module:model/MetaAthlete} athlete
   */
exports.prototype['athlete'] = undefined;

  /**
   * The name of the activity
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * The activity's distance, in meters
   * @member {Number} distance
   */
exports.prototype['distance'] = undefined;

  /**
   * The activity's moving time, in seconds
   * @member {Number} moving_time
   */
exports.prototype['moving_time'] = undefined;

  /**
   * The activity's elapsed time, in seconds
   * @member {Number} elapsed_time
   */
exports.prototype['elapsed_time'] = undefined;

  /**
   * The activity's total elevation gain.
   * @member {Number} total_elevation_gain
   */
exports.prototype['total_elevation_gain'] = undefined;

  /**
   * The activity's highest elevation, in meters
   * @member {Number} elev_high
   */
exports.prototype['elev_high'] = undefined;

  /**
   * The activity's lowest elevation, in meters
   * @member {Number} elev_low
   */
exports.prototype['elev_low'] = undefined;

  /**
   * @member {module:model/ActivityType} type
   */
exports.prototype['type'] = undefined;

  /**
   * The time at which the activity was started.
   * @member {Date} start_date
   */
exports.prototype['start_date'] = undefined;

  /**
   * The time at which the activity was started in the local timezone.
   * @member {Date} start_date_local
   */
exports.prototype['start_date_local'] = undefined;

  /**
   * The timezone of the activity
   * @member {String} timezone
   */
exports.prototype['timezone'] = undefined;

  /**
   * @member {module:model/LatLng} start_latlng
   */
exports.prototype['start_latlng'] = undefined;

  /**
   * @member {module:model/LatLng} end_latlng
   */
exports.prototype['end_latlng'] = undefined;

  /**
   * The number of achievements gained during this activity
   * @member {Number} achievement_count
   */
exports.prototype['achievement_count'] = undefined;

  /**
   * The number of kudos given for this activity
   * @member {Number} kudos_count
   */
exports.prototype['kudos_count'] = undefined;

  /**
   * The number of comments for this activity
   * @member {Number} comment_count
   */
exports.prototype['comment_count'] = undefined;

  /**
   * The number of athletes for taking part in a group activity
   * @member {Number} athlete_count
   */
exports.prototype['athlete_count'] = undefined;

  /**
   * The number of Instagram photos for this activity
   * @member {Number} photo_count
   */
exports.prototype['photo_count'] = undefined;

  /**
   * The number of Instagram and Strava photos for this activity
   * @member {Number} total_photo_count
   */
exports.prototype['total_photo_count'] = undefined;

  /**
   * @member {module:model/PolylineMap} map
   */
exports.prototype['map'] = undefined;

  /**
   * Whether this activity was recorded on a training machine
   * @member {Boolean} trainer
   */
exports.prototype['trainer'] = undefined;

  /**
   * Whether this activity is a commute
   * @member {Boolean} commute
   */
exports.prototype['commute'] = undefined;

  /**
   * Whether this activity was created manually
   * @member {Boolean} manual
   */
exports.prototype['manual'] = undefined;

  /**
   * Whether this activity is private
   * @member {Boolean} private
   */
exports.prototype['private'] = undefined;

  /**
   * Whether this activity is flagged
   * @member {Boolean} flagged
   */
exports.prototype['flagged'] = undefined;

  /**
   * The activity's workout type
   * @member {Number} workout_type
   */
exports.prototype['workout_type'] = undefined;

  /**
   * The activity's average speed, in meters per second
   * @member {Number} average_speed
   */
exports.prototype['average_speed'] = undefined;

  /**
   * The activity's max speed, in meters per second
   * @member {Number} max_speed
   */
exports.prototype['max_speed'] = undefined;

  /**
   * Whether the logged-in athlete has kudoed this activity
   * @member {Boolean} has_kudoed
   */
exports.prototype['has_kudoed'] = undefined;

  /**
   * The id of the gear for the activity
   * @member {String} gear_id
   */
exports.prototype['gear_id'] = undefined;

  /**
   * The total work done in kilojoules during this activity. Rides only
   * @member {Number} kilojoules
   */
exports.prototype['kilojoules'] = undefined;

  /**
   * Average power output in watts during this activity. Rides only
   * @member {Number} average_watts
   */
exports.prototype['average_watts'] = undefined;

  /**
   * Whether the watts are from a power meter, false if estimated
   * @member {Boolean} device_watts
   */
exports.prototype['device_watts'] = undefined;

  /**
   * Rides with power meter data only
   * @member {Number} max_watts
   */
exports.prototype['max_watts'] = undefined;

  /**
   * Similar to Normalized Power. Rides with power meter data only
   * @member {Number} weighted_average_watts
   */
exports.prototype['weighted_average_watts'] = undefined;



  return exports;
}));



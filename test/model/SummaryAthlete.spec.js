/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StravaApiV3.SummaryAthlete();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SummaryAthlete', function() {
    it('should create an instance of SummaryAthlete', function() {
      // uncomment below and update the code to test SummaryAthlete
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be.a(StravaApiV3.SummaryAthlete);
    });

    it('should have the property resourceState (base name: "resource_state")', function() {
      // uncomment below and update the code to test the property resourceState
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property firstname (base name: "firstname")', function() {
      // uncomment below and update the code to test the property firstname
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property lastname (base name: "lastname")', function() {
      // uncomment below and update the code to test the property lastname
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property profileMedium (base name: "profile_medium")', function() {
      // uncomment below and update the code to test the property profileMedium
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property profile (base name: "profile")', function() {
      // uncomment below and update the code to test the property profile
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property sex (base name: "sex")', function() {
      // uncomment below and update the code to test the property sex
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property friend (base name: "friend")', function() {
      // uncomment below and update the code to test the property friend
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property follower (base name: "follower")', function() {
      // uncomment below and update the code to test the property follower
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property premium (base name: "premium")', function() {
      // uncomment below and update the code to test the property premium
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property summit (base name: "summit")', function() {
      // uncomment below and update the code to test the property summit
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new StravaApiV3.SummaryAthlete();
      //expect(instance).to.be();
    });

  });

}));

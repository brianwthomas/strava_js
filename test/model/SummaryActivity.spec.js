/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StravaApiV3.SummaryActivity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SummaryActivity', function() {
    it('should create an instance of SummaryActivity', function() {
      // uncomment below and update the code to test SummaryActivity
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be.a(StravaApiV3.SummaryActivity);
    });

    it('should have the property externalId (base name: "external_id")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property uploadId (base name: "upload_id")', function() {
      // uncomment below and update the code to test the property uploadId
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property athlete (base name: "athlete")', function() {
      // uncomment below and update the code to test the property athlete
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property distance (base name: "distance")', function() {
      // uncomment below and update the code to test the property distance
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property movingTime (base name: "moving_time")', function() {
      // uncomment below and update the code to test the property movingTime
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property elapsedTime (base name: "elapsed_time")', function() {
      // uncomment below and update the code to test the property elapsedTime
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property totalElevationGain (base name: "total_elevation_gain")', function() {
      // uncomment below and update the code to test the property totalElevationGain
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property elevHigh (base name: "elev_high")', function() {
      // uncomment below and update the code to test the property elevHigh
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property elevLow (base name: "elev_low")', function() {
      // uncomment below and update the code to test the property elevLow
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "start_date")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property startDateLocal (base name: "start_date_local")', function() {
      // uncomment below and update the code to test the property startDateLocal
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property startLatlng (base name: "start_latlng")', function() {
      // uncomment below and update the code to test the property startLatlng
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property endLatlng (base name: "end_latlng")', function() {
      // uncomment below and update the code to test the property endLatlng
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property achievementCount (base name: "achievement_count")', function() {
      // uncomment below and update the code to test the property achievementCount
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property kudosCount (base name: "kudos_count")', function() {
      // uncomment below and update the code to test the property kudosCount
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property commentCount (base name: "comment_count")', function() {
      // uncomment below and update the code to test the property commentCount
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property athleteCount (base name: "athlete_count")', function() {
      // uncomment below and update the code to test the property athleteCount
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property photoCount (base name: "photo_count")', function() {
      // uncomment below and update the code to test the property photoCount
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property totalPhotoCount (base name: "total_photo_count")', function() {
      // uncomment below and update the code to test the property totalPhotoCount
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property map (base name: "map")', function() {
      // uncomment below and update the code to test the property map
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property trainer (base name: "trainer")', function() {
      // uncomment below and update the code to test the property trainer
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property commute (base name: "commute")', function() {
      // uncomment below and update the code to test the property commute
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property manual (base name: "manual")', function() {
      // uncomment below and update the code to test the property manual
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property _private (base name: "private")', function() {
      // uncomment below and update the code to test the property _private
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property flagged (base name: "flagged")', function() {
      // uncomment below and update the code to test the property flagged
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property workoutType (base name: "workout_type")', function() {
      // uncomment below and update the code to test the property workoutType
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property averageSpeed (base name: "average_speed")', function() {
      // uncomment below and update the code to test the property averageSpeed
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property maxSpeed (base name: "max_speed")', function() {
      // uncomment below and update the code to test the property maxSpeed
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property hasKudoed (base name: "has_kudoed")', function() {
      // uncomment below and update the code to test the property hasKudoed
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property gearId (base name: "gear_id")', function() {
      // uncomment below and update the code to test the property gearId
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property kilojoules (base name: "kilojoules")', function() {
      // uncomment below and update the code to test the property kilojoules
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property averageWatts (base name: "average_watts")', function() {
      // uncomment below and update the code to test the property averageWatts
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property deviceWatts (base name: "device_watts")', function() {
      // uncomment below and update the code to test the property deviceWatts
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property maxWatts (base name: "max_watts")', function() {
      // uncomment below and update the code to test the property maxWatts
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

    it('should have the property weightedAverageWatts (base name: "weighted_average_watts")', function() {
      // uncomment below and update the code to test the property weightedAverageWatts
      //var instance = new StravaApiV3.SummaryActivity();
      //expect(instance).to.be();
    });

  });

}));

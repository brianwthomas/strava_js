/**
 * Strava API v3
 * Strava API
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StravaApiV3);
  }
}(this, function(expect, StravaApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StravaApiV3.DetailedSegmentEffort();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DetailedSegmentEffort', function() {
    it('should create an instance of DetailedSegmentEffort', function() {
      // uncomment below and update the code to test DetailedSegmentEffort
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be.a(StravaApiV3.DetailedSegmentEffort);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property activity (base name: "activity")', function() {
      // uncomment below and update the code to test the property activity
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property athlete (base name: "athlete")', function() {
      // uncomment below and update the code to test the property athlete
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property movingTime (base name: "moving_time")', function() {
      // uncomment below and update the code to test the property movingTime
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property startIndex (base name: "start_index")', function() {
      // uncomment below and update the code to test the property startIndex
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property endIndex (base name: "end_index")', function() {
      // uncomment below and update the code to test the property endIndex
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property averageCadence (base name: "average_cadence")', function() {
      // uncomment below and update the code to test the property averageCadence
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property averageWatts (base name: "average_watts")', function() {
      // uncomment below and update the code to test the property averageWatts
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property deviceWatts (base name: "device_watts")', function() {
      // uncomment below and update the code to test the property deviceWatts
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property averageHeartrate (base name: "average_heartrate")', function() {
      // uncomment below and update the code to test the property averageHeartrate
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property maxHeartrate (base name: "max_heartrate")', function() {
      // uncomment below and update the code to test the property maxHeartrate
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property segment (base name: "segment")', function() {
      // uncomment below and update the code to test the property segment
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property komRank (base name: "kom_rank")', function() {
      // uncomment below and update the code to test the property komRank
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property prRank (base name: "pr_rank")', function() {
      // uncomment below and update the code to test the property prRank
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new StravaApiV3.DetailedSegmentEffort();
      //expect(instance).to.be();
    });

  });

}));
